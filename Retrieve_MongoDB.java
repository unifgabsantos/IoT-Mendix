// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mongodb.client.*;
import org.bson.Document;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.bson.json.JsonWriterSettings;

public class Retrieve_MongoDB extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String URL;
	private final java.lang.String Database;
	private final java.lang.String Collection;
	private final java.lang.String Search_Key;
	private final java.util.Date From;
	private final java.util.Date To;

	public Retrieve_MongoDB(
		IContext context,
		java.lang.String _uRL,
		java.lang.String _database,
		java.lang.String _collection,
		java.lang.String _search_Key,
		java.util.Date _from,
		java.util.Date _to
	)
	{
		super(context);
		this.URL = _uRL;
		this.Database = _database;
		this.Collection = _collection;
		this.Search_Key = _search_Key;
		this.From = _from;
		this.To = _to;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		JsonWriterSettings jsonSettings = JsonWriterSettings.builder()
		.dateTimeConverter((value, writer) -> {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String formattedDate = sdf.format(new java.util.Date(value));
			writer.writeString(formattedDate);
		})
		.build();
	

		try (MongoClient mongoClient = MongoClients.create(this.URL)) {
			MongoDatabase database = mongoClient.getDatabase(this.Database);
			MongoCollection<Document> collection = database.getCollection(this.Collection);

			Document filter = new Document(this.Search_Key,
					new Document("$gte", this.From)
							.append("$lte", this.To));

			FindIterable<Document> results = collection.find(filter);

			StringBuilder jsonArray = new StringBuilder("[");

			boolean first = true;
			for (Document doc : results) {
				doc.remove("_id"); // Remove o ObjectId padrão do Mongo
				if (!first) {
					jsonArray.append(",");
				}
				jsonArray.append(doc.toJson(jsonSettings));
				first = false;
			}

			jsonArray.append("]");

			return jsonArray.toString();
		} catch (Exception e) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Erro ao conectar ou buscar dados: " + e.getMessage());
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Retrieve_MongoDB";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
